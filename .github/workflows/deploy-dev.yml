name: Deploy Dev

on:
  workflow_dispatch:
    inputs:
      fresh-deploy:
        description: 'Limpa por completo o ambiente de desenvolvimento antes de fazer o deploy'
        required: false
        default: 'false'
        type: boolean
  push:
    branches:
      - dev
jobs:
  Deploy-Desenvolvimento:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup SSH Connection
      env:
        SSH_USER: ${{ secrets.SERVER_USER }}
        SSH_KEY: ${{ secrets.SERVER_KEY }}
        SSH_HOST: ${{ secrets.SERVER_HOST }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        cat >>~/.ssh/config <<END
        Host desenvolvimento-host
          HostName $SSH_HOST
          User $SSH_USER
          Port $SSH_PORT
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
        END

    - name: Limpando Servidor
      if: ${{ github.event.inputs.fresh-deploy == 'true' }}
      continue-on-error: true
      env:
        DB_USER: ${{ secrets.SERVER_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
      run: |
        ssh desenvolvimento-host "sudo systemctl stop dev_laravel_worker.service"
        ssh desenvolvimento-host "sudo rm -rf /var/www/atomic.sec/dev/*"
        ssh desenvolvimento-host "mysql -u $DB_USER -p$DB_PASS -e 'DROP DATABASE dev; CREATE DATABASE dev;'"


    - name: Build Assets
      run: |
        cd /home/runner/work/AtomicSec/AtomicSec/Atomic/
        npm install
        npm run build
        cd /home/runner/work/AtomicSec/AtomicSec/

    - name: Build and send AnalyzerAgent
      run: |
        cd /home/runner/work/AtomicSec/AtomicSec/AnalyzerAgent/
        docker build -t "analyzeragent:dev" .
        docker save -o analyzeragent-dev.tar analyzeragent:dev
        scp ./analyzeragent-dev.tar desenvolvimento-host:~/analyzeragent-dev.tar
        ssh desenvolvimento-host "docker load -i ~/analyzeragent-dev.tar && rm ~/analyzeragent-dev.tar"
    
    - name: Build and set up HTTP Keep Alive Attack
      run: |
        sudo apt install golang-go
        mkdir -p /home/runner/work/AtomicSec/AtomicSec/Atomic/bin/attacks
        cd /home/runner/work/AtomicSec/AtomicSec/Attacks/HTTP_Keep-Alive/
        GOOS=linux GOARCH=amd64 go build -o HTTP_Keep_Alive
        cp ./HTTP_Keep_Alive /home/runner/work/AtomicSec/AtomicSec/Atomic/bin/attacks/

    - name: Build and set up HTTP Slow Post Attack
      run: |
        cd /home/runner/work/AtomicSec/AtomicSec/Attacks/HTTP_Slow-Post/
        GOOS=linux GOARCH=amd64 go build -o HTTP_Slow_Post
        cp ./HTTP_Slow_Post /home/runner/work/AtomicSec/AtomicSec/Atomic/bin/attacks/

    - name: Build and set up Post Flood Attack
      run: |
        cd /home/runner/work/AtomicSec/AtomicSec/Attacks/Post_Flood
        GOOS=linux GOARCH=amd64 go build -o Post_Flood
        cp ./Post_Flood /home/runner/work/AtomicSec/AtomicSec/Atomic/bin/attacks/

    - name: Build and set up XML RPC Flood Attack
      run: |
        cd /home/runner/work/AtomicSec/AtomicSec/Attacks/XML_RPC_Flood
        GOOS=linux GOARCH=amd64 go build -o XML_RPC_Flood
        cp ./XML_RPC_Flood /home/runner/work/AtomicSec/AtomicSec/Atomic/bin/attacks/

    - name: Web platform sync files
      run: |
        rsync -z \
              --delete \
              --inplace \
              --no-perms \
              --recursive \
              --whole-file \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='node_modules' \
              --exclude='vendor' \
              --include='storage/framework' \
              --exclude='storage/*' \
              --exclude='.env' \
              /home/runner/work/AtomicSec/AtomicSec/Atomic/ desenvolvimento-host:/var/www/atomic.sec/dev/

    - name: Setup web platform
      env:
        SSH_USER: ${{ secrets.SERVER_USER }}
        ENV_DEV: ${{ secrets.ENV_DEV }}
      run: |
        #Setup .env
        echo "$ENV_DEV" > env_dev
        ssh desenvolvimento-host "rm /var/www/atomic.sec/dev/.env"
        scp ./env_dev desenvolvimento-host:/var/www/atomic.sec/dev/.env
        rm ./env_dev
        #Install composer dependencies
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && composer install --no-dev --optimize-autoloader"
        #Make results directory
        ssh desenvolvimento-host "mkdir -p /var/www/atomic.sec/dev/storage/framework/cache/data"
        #set permissions
        ssh desenvolvimento-host "sudo chown www-data:www-data -R /var/www/atomic.sec/dev/"
        ssh desenvolvimento-host "sudo chmod 775 -R /var/www/atomic.sec/dev/"
        #Setup attack permissions
        ssh desenvolvimento-host "sudo chmod +x -R /var/www/atomic.sec/dev/bin/attacks/HTTP_Keep_Alive"
        ssh desenvolvimento-host "sudo systemctl restart dev_laravel_worker.service"

    - name: Setup again
      if: ${{ github.event.inputs.fresh-deploy == 'true' }}
      run: |
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && php artisan migrate --force"
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && php artisan config:cache"
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && php artisan route:cache"
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && php artisan view:cache"
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && php artisan storage:link"
        ssh desenvolvimento-host "cd /var/www/atomic.sec/dev/ && php artisan queue:restart"
        #Make results directory
        ssh desenvolvimento-host "mkdir -p /var/www/atomic.sec/dev/storage/framework/cache/data"
        #set permissions
        ssh desenvolvimento-host "sudo chown www-data:www-data -R /var/www/atomic.sec/dev/"
        ssh desenvolvimento-host "sudo chmod 775 -R /var/www/atomic.sec/dev/"
        #Setup attack permissions
        ssh desenvolvimento-host "sudo chmod +x -R /var/www/atomic.sec/dev/bin/attacks/HTTP_Keep_Alive"
        ssh desenvolvimento-host "sudo systemctl restart dev_laravel_worker.service"